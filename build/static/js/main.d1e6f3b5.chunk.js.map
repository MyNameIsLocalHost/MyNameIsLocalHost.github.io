{"version":3,"sources":["serviceWorker.ts","components/operations/Operation.tsx","components/RootItem.tsx","components/EmptyItem.tsx","components/RemovedItem.tsx","components/materials/MaterialGroupSimpleItem.tsx","components/materials/MaterialSingletonSimpleItem.tsx","components/Item.tsx","components/CalcMate.tsx","index.js"],"names":["Boolean","window","location","hostname","match","Operation","model","type","state","ToggleButtonGroup","exclusive","value","onChange","e","newValue","console","log","forceUpdate","ToggleButton","_type","sourceModel","components","menu","sort","add","remove","Icon","onClick","constructor","move","paste","exportableOperations","component","viewableMenu","length","isShowingAttachMenu","popupMenuTitle","props","data","name","popupMenu","isNotSortable","fontSize","myId","id","parent","childrenIds","slice","reverse","color","sortItem","isNotMovable","render_checkBox","isNotRemovable","addMenu","getAddMenu","isChecked","getPasteMenu","error","enabled","getDescendant","_model","_acc","isDescendant","acc","children","map","_childModel","onCheck","bool","_descendantModel","setState","targetModels","delete","menuTitle","Object","keys","order","caption","React","Component","targetModel","Set","RootItem","isCopyable","acceptableItemTypes","nameOnBreadcrumb","onCreateLink","EmptyItem","isNotRender","isNotCopyable","isNotCutable","isNotLinkable","RemovedItem","removeItemData","old_value","MaterialGroupSimpleItem","newId","amount","unit","count","acceptableTypes","priorityOrder","render_content","isShowingChildren","icon","true","false","style","width","target","doCalcrate","result","calculating","table","result_text","_name","_unit","alert","_count","_process","process","_childId","_childData","get","_childType","_childComonent","usableItemComponentList","MaterialSingletonSimpleItem","hasOwnProperty","defaultItemDataList","0","emptyIds","removedIds","1","2","3","4","5","6","7","8","9","10","set_by_traceDown","prevState","nextState","splitedResult","place","isNaN","Number","indexOf","split","push","split_target_by_delimiter","recursionForTraceDown","shift","Array","isArray","Item","key","instances","getNextKey","set","relativeDepth","root","this","indent","Math","max","fill","render_toggleButtonGroup","render_doButton","render_children","render_popupMenu","render_attachedButton","childDatas","_id","childComponents","_data","_order","nextProps","addType","getUsableIds","newItem","getDefaultItem","nextChildrenIds","reincarnateEmptyIds","parentId","targetId","targetOrder","findIndex","_array","_information","information","addItem","operationState","isNotPastable","notCopyableTypes","notCutableTypes","notLinkableTypes","from","isNotCutvable","size","copyPaste","infoAboutNotCopyable","join","cutPaste","infoAboutNotCutable","linkPaste","infoAboutNotLinkable","list","update","getList","setInitialState","_dataList","_dataList_setState","isRequestUpdate","_requestSize","difference","complementIds","_max","_ids","instance","splice","reset","newIds","copiedDatas","copiedData","targetDatas","targetIds","childrenIds_byDestination","nextChildrenIds_byDestination","_parentModel","_targetId","nextChildrenIds_bySourceParent","CalcMate","address","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1e6f3b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n// 以下、render_toggleButtonGroup で利用\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\t// menu\r\nimport MenuIcon from '@material-ui/icons/Menu';\t\r\n\t// sort\r\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\r\n\t// add\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\n\t// paste\r\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\r\n\t// move\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\n\t// remove\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n// 以上、render_toggleButtonGroup で利用\r\n\r\n// 以下、render_attachedButton で利用\r\n\t// ( not used )\r\nimport SortIcon from '@material-ui/icons/Sort';\r\n\t// sort\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\n\t// notSortable\r\nimport BlockIcon from '@material-ui/icons/Block';\r\n\t// add\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\t// move, remove\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\t// paste\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\n// 以上、render_attachedButton で利用\r\n\r\n// doButton で利用\t\t// exeButton にも利用してるけど、それ自体は未使用の処理\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nexport default class Operation extends React.Component{\r\n\t\r\n\tstatic state = {\r\n\t\ttype : \"move\",\t// menu, sort, add, move, remove or paste\r\n\t\tsourceModel : null,\r\n\t\t//destinationModel : null,\r\n\t\ttargetModel : null,\r\n\t\ttargetModels : new Set(),\r\n\t\tpopupMenuTitle : \"\",\r\n\t\tpopupMenu : [],\r\n\t}\r\n\t\r\n\t// 2019/10/7 完成\r\n\tstatic render_toggleButtonGroup( model ){\r\n\t\tconst type = ( Operation.state.type === \"paste\" )? \"move\" : Operation.state.type;\r\n\r\n\t\treturn(\r\n\t\t<ToggleButtonGroup exclusive={true} value={type} onChange={(e,newValue)=>{\r\n\t\t\tif( newValue === null ) return null;\t// 前回と同じボタンが選択されるとnull が渡ってくるので、状態変更をしない\r\n\t\t\tconsole.log( newValue );\r\n\t\t\tOperation.state.type = newValue;\r\n\t\t\tmodel.forceUpdate();\r\n\t\t}} >\r\n\t\t\t<ToggleButton value=\"menu\" ><MenuIcon /></ToggleButton>\r\n\t\t\t<ToggleButton value=\"sort\" ><ImportExportIcon /></ToggleButton>\r\n\t\t\t<ToggleButton value=\"move\" ><SyncAltIcon /></ToggleButton>\r\n\t\t\t{/*<ToggleButton value=\"><TrendingFlatIcon></ToggleButton>\r\n\t\t\t*/}\r\n\t\t\t<ToggleButton value=\"remove\" ><DeleteIcon /></ToggleButton>\r\n\t\t\t<ToggleButton value=\"add\" ><PlaylistAddIcon /></ToggleButton>\r\n\t\t</ToggleButtonGroup>);\r\n\t}\r\n\t\r\n\t// 2019/10/7 完成\r\n\tstatic render_doButton( model ){\r\n\t\tconst type = Operation.state.type;\r\n\t\tconst onChange = ( _type )=>{\r\n\t\t\tOperation.state.type = _type;\r\n\t\t\tOperation.state.sourceModel = model;\r\n\t\t\tmodel.forceUpdate();\r\n\t\t};\r\n\t\tconst components = {\r\n\t\t\tmenu : null,\r\n\t\t\tsort : null,\r\n\t\t\tadd : null,\r\n\t\t\tremove : <Icon onClick={()=> model.constructor.remove( null, Operation.state ) } >REMOVE</Icon>,\r\n\t\t\tmove : <Icon onClick={()=> onChange(\"paste\") } >PASTE</Icon>,\r\n\t\t\tpaste : <Icon onClick={()=> onChange(\"move\") } >CANCEL</Icon>,\r\n\t\t};\r\n\t\treturn(<>\r\n\t\t\t{ components[ type ] }\r\n\t\t</>);\r\n\t}\r\n\t\r\n\tstatic render_attachedButton( model ){\r\n\t\t\r\n\t\tconst type = Operation.state.type;\r\n\t\tconst exportableOperations = model.component.exportableOperations;\r\n\t\t\r\n\t\tif( type === \"menu\" ){\r\n\t\t\tconst menu = exportableOperations.viewableMenu || [];\r\n\t\t\t//console.log( menu );\r\n\t\t\tif( ! menu.length ) return null;\r\n\t\t\t\r\n\t\t\t// isShowingAttachMenu は、ここでのみ利用する\r\n\t\t\tconst isShowingAttachMenu = model.state.isShowingAttachMenu || false;\r\n\t\t\t\r\n\t\t\treturn(\r\n\t\t\t\t<MenuIcon onClick={ ()=> {\r\n\t\t\t\t\tOperation.state.popupMenuTitle = `[ ${ model.props.data.name } ]`;\r\n\t\t\t\t\tOperation.state.popupMenu = menu;\r\n\t\t\t\t\tmodel.constructor.forceUpdate();\r\n\t\t\t\t} } />\r\n\t\t\t);\r\n\t\t}\r\n\t\tif( type === \"sort\" ){\r\n\t\t\t// parentModel の子要素リスト から、この model の順番を下げる Button を設置する\r\n\t\t\tconst isNotSortable = exportableOperations.isNotSortable || false;\r\n\t\t\t\r\n\t\t\tif( isNotSortable ) return <BlockIcon fontSize=\"small\" />;\r\n\t\t\t\r\n\t\t\tconst myId = model.props.data.id;\r\n\t\t\tconst parent = model.props.parent;\r\n\t\t\t// この model が、parentModel に対して、末尾の子要素であるかの判定\r\n\t\t\tconst isLast = ( parent.props.data.childrenIds.slice().reverse()[0] === myId );\r\n\t\t\t\t// ここね、.slice() しないと、元の値が書き換わる。\r\n\t\t\t\r\n\t\t\tif( isLast ){\r\n\t\t\t\t// この model が、末尾の子要素なので、Button を無効にする\r\n\t\t\t\treturn <ArrowDownwardIcon color=\"disabled\" fontSize=\"small\" />;\r\n\t\t\t}else{\r\n\t\t\t\treturn <ArrowDownwardIcon onClick={ ()=> model.constructor.sortItem( model ) } fontSize=\"small\" />;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( type === \"move\" ){\r\n\t\t\tconst isNotMovable = exportableOperations.isNotMovable || false;\r\n\t\t\t\r\n\t\t\tif( isNotMovable ) return null;\r\n\t\t\treturn Operation.render_checkBox( model );\r\n\t\t}\r\n\t\tif( type === \"remove\" ){\r\n\t\t\tconst isNotRemovable = exportableOperations.isNotRemovable || false;\r\n\r\n\t\t\tif( isNotRemovable ) return null;\r\n\t\t\treturn Operation.render_checkBox( model );\t\t\t\r\n\t\t}\r\n\t\tif( type === \"add\" ){\r\n\t\t\tconst addMenu = model.constructor.getAddMenu( model );\r\n\t\t\tif( addMenu.length === 0 ) return <AddIcon color=\"disabled\" />;\r\n\t\t\treturn  <AddIcon color=\"action\" onClick={ () => {\r\n\t\t\t\tOperation.state.popupMenuTitle = `[ ${ model.props.data.name } ]`;\r\n\t\t\t\tOperation.state.popupMenu = addMenu;\r\n\t\t\t\tmodel.constructor.forceUpdate();\r\n\t\t\t} } />;\r\n\t\t}\r\n\t\tif( type === \"paste\" ){\r\n\t\t\tconst isChecked = model.state.isChecked || false;\r\n\t\t\tif( isChecked ){\r\n\t\t\t\t// move で既に選択されてる状態なので、操作対象として、そのままロックする\r\n\t\t\t\tconst isNotMovable = exportableOperations.isNotMovable || false;\r\n\t\t\t\tif( isNotMovable ) return null;\r\n\t\t\t\t\treturn Operation.render_checkBox( model, false );\r\n\t\t\t}else{\r\n\t\t\t\t// move で未選択だったので、これを操作先として、選択できるようにする\r\n\t\t\t\t// ここで model は、貼り付け先 を示している\r\n\t\t\t\t\r\n\t\t\t\tconst menu = model.constructor.getPasteMenu( model, Operation.state );\r\n\t\t\t\t\r\n\t\t\t\tif( menu.length === 0 ){\r\n\t\t\t\t\treturn Operation.render_checkBox( model, false );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn(<>\r\n\t\t\t\t\t<PostAddIcon onClick={ ()=> {\r\n\t\t\t\t\t\tOperation.state.popupMenuTitle = `[ ${ model.props.data.name } ]`;\r\n\t\t\t\t\t\tOperation.state.popupMenu = menu;\r\n\t\t\t\t\t\tmodel.constructor.forceUpdate();\r\n\t\t\t\t\t} } />\r\n\t\t\t\t</>);\r\n\t\t\t\t// 以上、exeButton の、paste のときの処理 のコピー\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.error( `現在の Operation.state.type の値 : ${ type } は不正です` ); \r\n\t\treturn null;\r\n\t}\r\n\t\r\n/*\tstatic render_exeButton( model ){\r\n\t\t\r\n\t\t//type : \"move\",\t// menu, sort, move, remove or paste\r\n\t\t\r\n\t\tconst type = Operation.state.type;\r\n\t\tconst exportableOperations = model.component.exportableOperations;\r\n\t\t\r\n\t\tconst onClick = ( nextType ) => {\r\n\t\t\tOperation.state.type = nextType;\r\n\t\t\tOperation.state.sourceModel = model;\r\n\t\t\tmodel.forceUpdate();\r\n\t\t};\r\n\t\t\r\n\t\tif( type === \"menu\" || type === \"sort\" ){\r\n\t\t\treturn <Icon color=\"disabled\" >―</Icon>;\r\n\t\t}\r\n\t\tif( type === \"move\" ){\r\n\t\t\treturn <Icon onClick={ ()=> onClick(\"paste\") } >move</Icon>;\r\n\t\t}\r\n\t\tif( type === \"remove\" ){\r\n\t\t\treturn <Icon>remove</Icon>;\r\n\t\t}\r\n\t\tif( type === \"paste\" ){\r\n\t\t\t// ここで model は、貼り付け先 を示している\r\n\t\t\t// isShowingPasteMenu は、ここでのみ利用する\r\n\t\t\tconst isShowingPasteMenu = model.state.isShowingPasteMenu || false;\r\n\t\t\tconst menu = model.constructor.getPasteMenu( model, Operation.state );\r\n\t\t\t\r\n\t\t\treturn(<>\r\n\t\t\t\t<Icon onClick={ ()=> {\r\n\t\t\t\t\tmodel.setState( { isShowingPasteMenu : ! isShowingPasteMenu } );\r\n\t\t\t\t\tmodel.forceUpdate();\r\n\t\t\t\t} } >paste</Icon>\r\n\t\t\t\t{ ( isShowingPasteMenu )\r\n\t\t\t\t? <>{ Operation.render_popupMenu( menu ) } {console.log(\"pasteMenuが表示されるはず\")}</>\r\n\t\t\t\t: null }\r\n\t\t\t</>);\r\n\t\t}\r\n\t}*/\r\n\t\r\n\t// 完成 2019/10/5 ~ 2019/10/8\r\n\tstatic render_checkBox( model, enabled = true ){\r\n\t\tconst isChecked = model.state.isChecked || false;\r\n\t\t\r\n\t\t// descendant = 末裔\r\n\t\tconst getDescendant = ( _model, _acc ) => {\r\n\t\t\t\r\n\t\t\tconst isDescendant = _model.component.exportableOperations.isDescendant || false;\r\n\t\t\tlet acc = _acc;\r\n\t\t\t\r\n\t\t\tif( isDescendant ){\r\n\t\t\t\treturn [ ...acc, _model ];\r\n\t\t\t}else{\r\n\t\t\t\t_model.children.map( _childModel => {\r\n\t\t\t\t\tacc = getDescendant( _childModel, acc );\r\n\t\t\t\t} );\r\n\t\t\t\treturn [ ...acc, _model ];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tconst onCheck = ( bool : boolean ) => {\r\n\t\t\t\r\n\t\t\tconst descendants = getDescendant( model, [] );\r\n\t\t\tdescendants.map ( _descendantModel => {\r\n\t\t\t\t_descendantModel.setState( { isChecked : bool } );\r\n\t\t\t\tif( ! bool ) Operation.state.targetModels.delete( _descendantModel );\r\n\t\t\t} );\r\n\t\t\tif( bool ) Operation.state.targetModels.add( model );\r\n\t\t\telse Operation.state.targetModels.delete( model );\t\r\n\t\t};\r\n\t\t\r\n\t\tif( isChecked ){\r\n\t\t\tif( enabled ){\r\n\t\t\t\treturn <CheckBoxIcon onClick={ ()=>onCheck( false ) } />;\r\n\t\t\t}else{\r\n\t\t\t\treturn <CheckBoxIcon color=\"disabled\" />;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif( enabled ){\r\n\t\t\t\treturn <CheckBoxOutlineBlankIcon onClick={ ()=>onCheck( true ) } />;\r\n\t\t\t}else{\r\n\t\t\t\treturn <CheckBoxOutlineBlankIcon color=\"disabled\" />;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 完成 2019/10/4\r\n/*\tstatic render_addItemButton( model ){\r\n\t\tconst exportableOperations = model.component.exportableOperations || {};\r\n\t\tconst acceptableItemTypes = exportableOperations.acceptableItemTypes || {};\r\n\t\t// isShowingAddItemMenu は、ここでのみ利用する\r\n\t\tconst isShowingAddItemMenu = model.state.isShowingAddItemMenu || false;\r\n\t\t\r\n\t\tconst menu = acceptableItemTypes.map( ( type ) => {\r\n\t\t\treturn { caption : type+\" を追加する\", onClick : ()=>model.constructor.addItem(model,type) };\r\n\t\t} );\r\n\t\t\r\n\t\treturn(<>\r\n\t\t\t<PlaylistAddIcon onClick={()=> model.setState( { isShowingAddItemMenu : ! isShowingAddItemMenu } ) } />\r\n\t\t\t{ ( isShowingAddItemMenu )\r\n\t\t\t? <>{ Operation.render_popupMenu( menu ) }</>\r\n\t\t\t: null\r\n\t\t\t}\r\n\t\t</>);\r\n\t};*/\r\n\t\r\n\tstatic render_popupMenu(){\r\n\t\t\r\n\t\tconst menuTitle = Operation.state.popupMenuTitle || \"\";\r\n\t\tif( menuTitle === \"\" ) return <></>;\r\n\t\t\r\n\t\tconsole.log( \"menu が表示されます\" );\r\n\t\tconsole.log( menuTitle );\r\n\t\t\r\n\t\tconst menu = Operation.state.popupMenu || [];\r\n\t\t\r\n\t\tconst reset = () => {\r\n\t\t\tOperation.state.popupMenuTitle = \"\";\r\n\t\t\tOperation.state.popupMenu = [];\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t\r\n\t\treturn(<>\r\n\t\t\t<span>{ menuTitle }</span>\r\n\t\t\t<ul>\r\n\t\t\t{Object.keys(menu).map( ( order ) =>\r\n\t\t\t\t<li onClick={menu[order].onClick} >{menu[order].caption}</li>\r\n\t\t\t) }\r\n\t\t\t</ul>\r\n\t\t\t{ reset() }\r\n\t\t</>);\r\n\t};\r\n\t\r\n}","import React from 'react';\r\n\r\nimport MaterialGroupItem from './materials/MaterialGroupItem';\r\nimport MaterialSingletonItem from './materials/MaterialSingletonItem';\r\n\r\nexport default class RootItem extends React.Component{\r\n\t\r\n\tpublic static exportableOperations = {\r\n\t\tisCopyable : false,\r\n\t\tacceptableItemTypes : [ \"MaterialGroupItem\", \"MaterialSingletonItem\" ],\r\n\t\tviewableMenu : [\r\n\t\t],\r\n\t\tnameOnBreadcrumb : \"All\",\r\n\t}\r\n\t\r\n\tstatic onCreateLink = () => {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t\r\n\trender(){\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport default class EmptyItem extends React.Component{\r\n\t\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t}\r\n\r\n\tstatic getDefaultItem( id :number ){\r\n\t\treturn {\r\n\t\t\tname : \"EmptyItem\",\r\n\t\t\ttype : \"EmptyItem\",\r\n\t\t\tid : id,\r\n\t\t};\r\n\t}\r\n\tpublic static exportableOperations = {\r\n\t\t\r\n\t\tisNotRender : true,\r\n\t\tisNotCopyable : true,\r\n\t\tisNotCutable : true,\r\n\t\tisNotLinkable : true,\r\n\t}\r\n\t\r\n\tpublic render(){\r\n\t\treturn null;\r\n\t}\r\n}\r\n\t","import React from 'react';\r\n\r\n\r\nexport default class RemovedItem extends React.Component{\r\n\t\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t}\r\n\r\n\tstatic getDefaultItem( removeItemData ){\r\n\t\treturn {\r\n\t\t\tname : \"RemovedItem\",\r\n\t\t\ttype : \"RemovedItem\",\r\n\t\t\tid : removeItemData.id,\r\n\t\t\told_value : { ...removeItemData },\r\n\t\t};\r\n\t}\r\n\t\r\n\tpublic static exportableOperations = {\r\n\t\t\r\n\t\tisNotRender : true,\r\n\t\tisNotCopyable : true,\r\n\t\tisNotCutable : true,\r\n\t\tisNotLinkable : true,\r\n\t}\r\n\t\r\n\tpublic render(){\r\n\t\treturn null;\r\n\t}\r\n}\r\n\t","import React from 'react';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport default class MaterialGroupSimpleItem extends React.Component{\r\n\t// data 構造だけは、MaterialGroupItem と互換性あり\r\n\t\r\n\t\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t}\r\n\r\n\tstatic getDefaultItem( newId :number ){\r\n\t\treturn {\r\n\t\t\tname : \"new Group\",\r\n\t\t\ttype : \"MaterialGroupSimpleItem\",\r\n\t\t\tid : newId,\r\n\t\t\tchildrenIds : [],\r\n\t\t\tamount : { unit:\"セット\", count:1 },\r\n\t\t};\r\n\t}\r\n\t\r\n\tpublic static exportableOperations = {\r\n\t\tacceptableTypes : [ \"MaterialGroupSimpleItem\", \"MaterialSingletonSimpleItem\" ],\r\n\t\tpriorityOrder : 20,\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic render_content = ( model ) => {\r\n\t\tconst data = model.props.data;\r\n\t\tconst setState = model.constructor.data.setState;\r\n\t\tconst count = data.amount.count;\r\n\t\tconst unit = data.amount.unit;\r\n\t\tconst isShowingChildren = model.state.isShowingChildren;\r\n\t\tconst icon = {\r\n\t\t\ttrue : <FolderOpenIcon />,\r\n\t\t\tfalse : <FolderIcon />,\r\n\t\t};\r\n\t\t\r\n\t\treturn(<>\r\n\t\t\t{ icon[ isShowingChildren ] }\r\n\t\t\t<span onClick={ ()=>{\r\n\t\t\t\tmodel.setState({isShowingChildren:!isShowingChildren});\r\n\t\t\t} } >{data.name}\r\n\t\t\t</span>\r\n\t\t\t<span> 計算量 : </span>\r\n\t\t\t<input type=\"number\" style={{width:\"50px\"}} value={count} onChange={(e)=> setState( [data.id,\"amount/count\"], e.target.value ) } />\r\n\t\t\t<span> { unit } </span>\r\n\t\t\t<button onClick={ () => MaterialGroupSimpleItem.doCalcrate( model, data ) } > 計算する！！</button>\r\n\t\t</>);\r\n\t};\r\n\t\r\n\tstatic doCalcrate = ( model, data ) => {\r\n\t\t// 計算の開始\r\n\t\t\r\n\t\tconsole.log( `願われましては～、全部足すことの～` );\r\n\t\tconst result = MaterialGroupSimpleItem.calculating( model, data );\r\n\t\tconsole.table( result );\r\n\t\t\r\n\t\tlet result_text = \"\";\r\n\t\tObject.keys( result ).map( _name => {\r\n\t\t\tresult_text += `${ _name } : \\n`;\r\n\t\t\tObject.keys( result[ _name ] ).map( _unit => {\r\n\t\t\t\tresult_text += `     ${ result[ _name ][ _unit ] } ${ _unit } \\n`;\r\n\t\t\t} );\r\n\t\t\tresult_text += \"\\n\";\r\n\t\t} );\r\n\t\tconsole.log( \"計算結果 : \" );\r\n\t\tconsole.log( `${ result_text }` );\r\n\t\talert( `計算結果 : \\n \\n${ result_text }` );\r\n\t\tconsole.log( `ご破算で願われましては～、` );\r\n\t}\r\n\t\r\n\tstatic calculating = ( model, data, _count = 1, _process = {} ) => {\r\n\t\tconst amount = data.amount;\r\n\t\tconst count = _count * amount.count;\r\n\t\tlet process = _process;\t\r\n\t\t\r\n\t\tdata.childrenIds.map( _childId => {\r\n\t\t\t\r\n\t\t\tconst _childData = model.constructor.data.get( _childId );\r\n\t\t\tconst _childType = _childData.type;\r\n\t\t\t//console.log( _childData );\r\n\t\t\tif( _childType !== \"MaterialGroupSimpleItem\" && _childType !== \"MaterialSingletonSimpleItem\" ){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst _childComonent = model.constructor.usableItemComponentList[ _childType ];\r\n\t\t\tprocess = _childComonent.calculating( model, _childData, count, process );\r\n\t\t\t\r\n\t\t\t//console.log( process );\r\n\t\t\t/*\r\n\t\t\tif( ! process.hasOwnProperty( child_result.name ) ){\r\n\t\t\t\tprocess[ child_result.name ] = { [ child_result.unit ] : child_result.count };\r\n\t\t\t}else{\r\n\t\t\t\tif( ! process[ child_result.name ].hasOwnProperty( child_result.unit ) ){\r\n\t\t\t\t\tprocess[ child_result.name ][ child_result.unit ] = child_result.count;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tprocess[ child_result.name ][ child_result.unit ] += child_result.count;\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\t\t} );\r\n\t\treturn process;\r\n\t\t/*\r\n\t\tconst children_calcrationResults = model.children.map( _childModel => {\r\n\t\t\tconst _type = _childModel.props.data.type;\r\n\t\t\tif( _type === \"MaterialGroupSimpleItem\" || _type === \"MaterialSingletonSimpleItem\" ){\r\n\t\t\t\t//result = _childModel.component.calculating( _childModel, count, result );\r\n\t\t\t\treturn _childModel.component.calculating( _childModel, count );\r\n\t\t\t}else{\r\n\t\t\t\treturn null;\r\n\t\t\t}\t\t\t\r\n\t\t} ).filter( ( _result ) => ( _result !== null ) );\r\n\t\t*/\r\n\t\t/*\r\n\t\tchildren_calcrationResults.map( ( _result ) => {\r\n\t\t// children に対する計算の結果を、結合する\r\n\t\t\r\n\t\t\tif( ! process.hasOwnProperty( _result.name ) ){\r\n\t\t\t\tprocess[ _result.name ] = { [ _result.unit ] : _result.count };\r\n\t\t\t}else{\r\n\t\t\t\tif( ! process[ _result.name ].hasOwnProperty( _result.unit ) ){\r\n\t\t\t\t\tprocess[ _result.name ][ _result.unit ] = _result.count;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tprocess[ _result.name ][ _result.unit ] += _result.count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\t*/\r\n\t\t//return process;\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\n// React.Component を継承する理由：\r\n//\t\t① dataList の変更時、余計な再描画を避けたい\r\n//\t\t② this.props に、呼び出し元の Model を保持したい\r\n// ItemView は、data に基づく pure な出力。 そして、その data は、呼び出し元の ItemModel がprops として持ってる。\r\n// なので、data に変更があったら、これは勝手に再描画される\r\n\r\nexport default class MaterialSingletonSimpleItem extends React.Component{\r\n\t// data 構造だけは、MaterialGroupSimpleItem と互換性あり\r\n\t\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t}\r\n\t\r\n\tpublic static getDefaultItem( id ){\r\n\t\treturn {\r\n\t\t\tname : \"new Material\",\r\n\t\t\ttype : \"MaterialSingletonSimpleItem\",\r\n\t\t\tid : id,\r\n\t\t\tamount : {\r\n\t\t\t\tunit : \"個\", count : 1,\r\n\t\t\t},\r\n\t\t}\r\n\t};\r\n\t\r\n\tpublic static exportableOperations = {\r\n\t\tviewableMenu : [\r\n\t\t\t{ caption : \"ダミーなので決して押さないでください１\", onClick : ()=>{ alert( `押さないでください１` ) } },\r\n\t\t\t{ caption : \"ダミーなので決して押さないでください２\", onClick : ()=>{ alert( `押さないでください２` ) } },\r\n\t\t\t{ caption : \"ダミーなので決して押さないでください３\", onClick : ()=>{ alert( `押さないでください３` ) } },\r\n\t\t],\r\n\t\tisDescendant : true,\r\n\t\t//isNotPastable : true,\r\n\t\tpriorityOrder : 10,\r\n\t};\r\n\t\r\n\tstatic render_content = ( model ) => {\r\n\t\tconst data = model.props.data;\r\n\t\tconst setState = model.constructor.data.setState;\r\n\t\tconst count = data.amount.count;\r\n\t\tconst unit = data.amount.unit;\r\n\t\treturn(<>\r\n\t\t\t<ArrowRightIcon />\r\n\t\t\t<span>{ data.name }</span>\r\n\t\t\t<span> 使用量 : </span>\r\n\t\t\t<input type=\"number\" style={{width:\"50px\"}} value={count} onChange={(e)=> setState( [data.id,\"amount/count\"], e.target.value ) } />\r\n\t\t\t<input type=\"string\" style={{width:\"50px\"}} value={unit} onChange={(e)=> setState( [data.id,\"amount/unit\"], e.target.value ) } />\r\n\t\t</>);\r\n\t};\r\n\t\r\n\tstatic calculating = ( model, data, _count, process ) => {\r\n\t\t\r\n\t\tconst name = data.name;\r\n\t\tconst amount = data.amount;\r\n\t\tconst count = _count * amount.count;\r\n\t\tconst unit = amount.unit;\r\n\t\t\r\n\t\tif( ! process.hasOwnProperty( name ) ){\r\n\t\t\tprocess[ name ] = { [ unit ] : count };\r\n\t\t}else{\r\n\t\t\tif( ! process[ name ].hasOwnProperty( unit ) ){\r\n\t\t\t\tprocess[ name ][ unit ] = count;\r\n\t\t\t}else{\r\n\t\t\t\tprocess[ name ][ unit ] += count;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log( `${ name } : ${ count } ${ unit } なり～` );\r\n\t\r\n\treturn process;\r\n\t\t\r\n\t\t/*\r\n\t\treturn {\r\n\t\t\tname : name,\r\n\t\t\tunit : unit,\r\n\t\t\tcount : count,\r\n\t\t};*/\r\n\t\t\r\n\t\t/*return {\r\n\t\t\t[ name ] : {\r\n\t\t\t\t[ unit ] : count\r\n\t\t\t}\r\n\t\t};*/\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Operation from './operations/Operation';\r\n\r\n//import BaseItem from './BaseItem';\r\nimport RootItem from './RootItem';\r\nimport EmptyItem from './EmptyItem';\r\nimport RemovedItem from './RemovedItem';\r\n// import MaterialGroupItem from './materials/MaterialGroupItem';\r\n// import MaterialSingletonItem from './materials/MaterialSingletonItem';\r\n// import MaterialEntityItem from './materials/MaterialEntityItem';\r\n// import MaterialAbstractItem from './materials/MaterialAbstractItem';\r\n\r\nimport MaterialGroupSimpleItem from './materials/MaterialGroupSimpleItem';\r\nimport MaterialSingletonSimpleItem from './materials/MaterialSingletonSimpleItem';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n/*\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n*/\r\n\r\nexport const defaultItemDataList = {\t// 呼称：itemData\r\n\r\n\t0:{name:\"calMate_rial_itemList_root\",id:0,type:\"RootItem\",childrenIds:[1,6],emptyIds:[10],removedIds:[]},\r\n\t1:{name:\"秋の味覚コース\",id:1,type:\"MaterialGroupSimpleItem\",childrenIds:[2,5,9],amount:{unit:\"セット\",count:1}},\r\n\t2:{name:\"冷製もものパスタ\",id:2,type:\"MaterialGroupSimpleItem\",childrenIds:[3,4],amount:{unit:\"セット\",count:1}},\r\n\t3:{name:\"もも\",id:3,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"個\",count:0.5}},\r\n\t4:{name:\"パスタ\",id:4,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"束\",count:1}},\r\n\t5:{name:\"まいたけ\",id:5,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"g\",count:15}},\r\n\t6:{name:\"季節外れの寄り合わせコース\",id:6,type:\"MaterialGroupSimpleItem\",childrenIds:[7,8,10],amount:{unit:\"セット\",count:1}},\r\n\t7:{name:\"おもち\",id:7,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"個\",count:1}},\t//\tunitId が -1 なら、amount は即席のデータになる\r\n\t8:{name:\"桜でんぶ\",id:8,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"g\",count:5}},\r\n\t9:{name:\"さんま\",id:9,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"尾\",count:1}},\r\n\t10:{name:\"EmptyItem\",id:10,type:\"EmptyItem\"},\r\n/*\r\n\t0:{name:\"calMate_rial_itemList_root\",id:0,type:\"RootItem\",childrenIds:[1,6],emptyIds:[12],removedIds:[]},\r\n\t1:{name:\"秋の味覚コース\",id:1,type:\"MaterialGroupSimpleItem\",childrenIds:[2,5,7,8,9],amount:{unit:\"セット\",count:1}},\r\n\t2:{name:\"冷製もものパスタ\",id:2,type:\"MaterialGroupSimpleItem\",childrenIds:[3,4],amount:{unit:\"set\",count:1}},\r\n\t3:{name:\"EmptyItem\",id:3,type:\"EmptyItem\",childrenIds:[10],useUnitId:0,count:3},\r\n\t4:{name:\"パスタ\",id:4,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"束\",count:1}},\r\n\t5:{name:\"EmptyItem\",id:5,type:\"EmptyItem\",childrenIds:[11],useUnitId:1,count:250},\r\n\t6:{name:\"季節外れの寄り合わせコース\",id:6,type:\"MaterialGroupSimpleItem\",childrenIds:[7,8,9],amount:{unit:\"人前\",count:1}},\r\n\t7:{name:\"おもち\",id:7,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"個\",count:1}},\t//\tunitId が -1 なら、amount は即席のデータになる\r\n\t8:{name:\"桜でんぶ\",id:8,type:\"MaterialSingletonSimpleItem\",amount:{unit:\"g\",count:5}},\r\n\t9:{name:\"空のfolder\",id:9,type:\"MaterialGroupSimpleItem\",childrenIds:[],amount:{unit:\"個\",count:1}},\r\n\t10:{name:\"EmptyItem\",id:10,type:\"EmptyItem\",existenceConditions:[3],amounts:{0:{unit:\"個\",count:1},1:{unit:\"g\",count:230}}},\r\n\t11:{name:\"EmptyItem\",id:11,type:\"EmptyItem\",existenceConditions:[5],amounts:{0:{unit:\"袋\",count:1},1:{unit:\"g\",count:150}}},\r\n\t12:{name:\"EmptyItem\",id:12,type:\"EmptyItem\"},*/\r\n\t/*\r\n\t0:{name:\"calMate_rial_itemList_root\",id:0,type:\"RootItem\",childrenIds:[1,6],emptyIds:[12],removedIds:[]},\r\n\t1:{name:\"秋の味覚コース\",id:1,type:\"MaterialGroupItem\",childrenIds:[2,5,7,8,9],amount:{unit:\"セット\",count:1}},\r\n\t2:{name:\"冷製もものパスタ\",id:2,type:\"MaterialGroupItem\",childrenIds:[3,4],amount:{unit:\"set\",count:1}},\r\n\t3:{name:\"もも\",id:3,type:\"MaterialEntityItem\",childrenIds:[10],useUnitId:0,count:3},\r\n\t4:{name:\"パスタ\",id:4,type:\"MaterialSingletonItem\",amount:{unit:\"束\",count:1}},\r\n\t5:{name:\"まいたけ\",id:5,type:\"MaterialEntityItem\",childrenIds:[11],useUnitId:1,count:250},\r\n\t6:{name:\"季節外れの寄り合わせコース\",id:6,type:\"MaterialGroupItem\",childrenIds:[7,8,9],amount:{unit:\"人前\",count:1}},\r\n\t7:{name:\"おもち\",id:7,type:\"MaterialSingletonItem\",amount:{unit:\"個\",count:1}},\t//\tunitId が -1 なら、amount は即席のデータになる\r\n\t8:{name:\"桜でんぶ\",id:8,type:\"MaterialSingletonItem\",amount:{unit:\"g\",count:5}},\r\n\t9:{name:\"空のfolder\",id:9,type:\"MaterialGroupItem\",childrenIds:[],amount:{unit:\"個\",count:1}},\r\n\t10:{name:\"もも\",id:10,type:\"MaterialAbstractItem\",existenceConditions:[3],amounts:{0:{unit:\"個\",count:1},1:{unit:\"g\",count:230}}},\r\n\t11:{name:\"まいたけ\",id:11,type:\"MaterialAbstractItem\",existenceConditions:[5],amounts:{0:{unit:\"袋\",count:1},1:{unit:\"g\",count:150}}},\r\n\t12:{name:\"EmptyItem\",id:12,type:\"EmptyItem\"},*/\r\n};\r\n\r\nconst usableItemComponentList = {\t// 呼称：itemComponent\t\t※ 全ての component は static メンバで構成される。 一応、render 系メソッドを持つので、component とする\r\n\tRootItem : RootItem,\r\n\tEmptyItem : EmptyItem,\r\n\tRemovedItem : RemovedItem,\r\n//\tMaterialGroupItem : MaterialGroupItem,\r\n//\tMaterialSingletonItem : MaterialSingletonItem,\r\n//\tMaterialEntityItem : MaterialEntityItem,\r\n//\tMaterialAbstractItem : MaterialAbstractItem,\r\n\t\r\n\tMaterialGroupSimpleItem : MaterialGroupSimpleItem,\r\n\tMaterialSingletonSimpleItem : MaterialSingletonSimpleItem,\r\n\t\r\n};\r\n\r\n// 階層をたどって、目的の値を置き換える\r\nconst set_by_traceDown = ( prevState, target : string[], nextState ) => {\r\n\t\r\n\t// 以下、target に区切り文字が含まれている場合は分割する\r\n\tconst split_target_by_delimiter = () => {\r\n\t\t\tlet splitedResult :string[] = [];\r\n\t\t\ttarget.map( ( place :string ) => {\r\n\t\t\t\t// 区切り文字を判定して、分割処理を行う\t\t\t\r\n\t\t\t\tif( isNaN( Number(place) ) && ( place.indexOf( \"/\" ) !== -1 ) ){\t\t// stringメソッドを数値に\r\n\t\t\t\t\t// \"/\"が含まれる場合\r\n\t\t\t\t\tplace.split( \"/\" ).map( ( result :string ) => { splitedResult.push( result ) } );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsplitedResult.push( place );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\ttarget = splitedResult;\r\n\t}\r\n\t\r\n\tsplit_target_by_delimiter();\r\n\t\r\n\t// 以下、階層をたどって、目的の値を置き換える\r\n\tconst recursionForTraceDown = ( prevState, target ) => {\r\n\t\tconsole.log( \"down : \", prevState, \"___\" + target );\r\n\t\tif( target.length > 1 ){\r\n\t\t\t// 目的の階層ではない場合\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\t[ target[0] ] : recursionForTraceDown( prevState[ target.shift() ], target ),\r\n\t\t\t};\r\n\t\t}else if( target.length === 1 ){\r\n\t\t\t// 目的の階層へ着いた場合\r\n\t\t\tif( ( typeof prevState === \"object\" ) && !Array.isArray( nextState ) ){\r\n\t\t\t// 新しい値が、object なら追加して、それ以外 なら置き換える\r\n\t\t\t\tconsole.log(\"オブジェクトです\");\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\t[ target[0] ] : nextState,\r\n\t\t\t\t};\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log(\"オブジェクトじゃないです\");\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\t[ target[0] ] : nextState,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}else if( target.length === 0 ){\r\n\t\t\t// target が、もともと指定されなかった場合( 空配列 )\r\n\t\t\tif( ( typeof prevState === \"object\" ) && !Array.isArray( nextState ) ){\r\n\t\t\t// 新しい値が、object なら追加して、それ以外 なら エラー\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\t...nextState,\r\n\t\t\t\t};\r\n\t\t\t}else{\r\n\t\t\t\tconsole.error( \"エラーです。setItemList の target は、必ず指定してください......\" );\r\n\t\t\t\treturn { ...prevState };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn recursionForTraceDown( prevState, target );\r\n};\r\n\r\ninterface I_Props {\r\n\tdata : { [  key : string ] : any };\r\n\trelativeDepth : number;\t// 相対的深さ\r\n\tparent : ( Item | null );\r\n};\r\n\r\ninterface I_State {\r\n\tisShowingChildren : boolean;\r\n\t// data : { [ key : string ] : any };\r\n};\r\n\r\n// Item コンポーネントを利用する際は、最初のアイテムデータによってインスタンス化するより前に、\r\n//\t\tdataList と setDataList を、setListAndSetState() に呼んで、セットしておかなければならない。\r\n//\t\tまた、外部で dataList と setDataList が変更された場合は、その都度、再セットしなければならない\r\n// なぜ、itemDataList を外部で保持するのか？　そうしたほうが、この Item コンポーネントのライフサイクルが整理できるから !!\r\n\r\nexport default class Item extends React.Component< I_Props, I_State >{\r\n\t\r\n\t// Item.getInstanceComponent\r\n\t\r\n\tstatic usableItemComponentList = usableItemComponentList;\r\n\tstatic root = null;\r\n\t\r\n\tkey = null;\r\n\tcomponent = null;\r\n\tchildren = [];\r\n\t\r\n\tconstructor( props ){\r\n\t\t// constructor は、インスタンスが生成されるときに呼ばれる。つまり、static なメンバーは、最初のインスタンスを呼ぶ前でも、利用できる\r\n\t\tsuper( props );\r\n\t\t\r\n\t\t// 自身に紐づく instances の key\r\n\t\tthis.key = Item.instances.getNextKey();\r\n\t\t\r\n\t\tItem.instances.set( this );\r\n\t\t//console.log( \"Item.constructor() : this.key = \" + this.key );\r\n\t\t//console.table( Item.instances.list );\r\n\t\t\r\n\t\t// 操作状態を保持するものに限る\r\n\t\tthis.state = {\r\n\t\t\tisShowingChildren : !( this.props.relativeDepth ),\t// 自身が root アイテムなら、true\r\n\t\t};\r\n\t\t\r\n\t\tif( this.props.relativeDepth === 0 ){\r\n\t\t\tItem.root = this;\r\n\t\t}\r\n\t\t\r\n\t\t/*// View と Controller から操作するために用意する\r\n\t\tthis.getOperationState = this.getOperationState.bind( this );\r\n\t\tthis.setOperationState = this.setOperationState.bind( this );*/\r\n\t};\r\n\t\r\n\tpublic render(){\r\n\t\tconst data = this.props.data;\r\n\t\tthis.component = usableItemComponentList[ this.props.data.type ];\r\n\t\t//console.log(component);\r\n\t\tconst relativeDepth = this.props.relativeDepth;\r\n\t\tthis.children = [];\r\n\t\t\r\n\t\t// 親要素の children に、自身を追加する\r\n\t\tif( this.props.parent === null ){\r\n\t\t\tItem.root.children.push( this );\r\n\t\t}else{\r\n\t\t\tthis.props.parent.children.push( this );\r\n\t\t}\r\n\t\t\r\n\t\tconst isShowingChildren = this.state.isShowingChildren || false;\r\n\t\t\r\n\t\tconst isNotChildrenExist = ( ( data.childrenIds || [] ).length === 0 );\r\n\t\t\r\n\t\t/* これ、各コンポーネントのアイコンで代替するので、いらない\r\n\t\tconst suffix =\t// suffix = 接尾\r\n\t\t\t( relativeDepth === 0 )? null:\r\n\t\t\t( isNotChildrenExist )? <ArrowForwardIosIcon fontSize=\"small\" />:\r\n\t\t\t( isShowingChildren )? <RemoveCircleOutlineIcon fontSize=\"small\" />:\r\n\t\t\t<AddCircleOutlineIcon fontSize=\"small\" />;\r\n\t\t*/\r\n\t\t\r\n\t\tconst indent = Array( Math.max( relativeDepth -1, 0 ) ).fill( \"　\" );\r\n\t\t//const indents = <>{ indent }{ suffix }</>;\r\n\t\t\r\n\t\tconsole.log( `relativeDepth[ ${ this.props.relativeDepth } ] より、model[ ${ this.key } ] に紐づく item[ ${ this.props.data.id } ] が表示されます` );\r\n\r\n\t\treturn(  <>{\r\n\t\t\t(  this.props.parent === null )\r\n\t\t\t?<>\r\n\t\t\t\t{/* 自身が root要素 なので、まずはパンくずリストを表示する */}\r\n\t\t\t\t{// Operation.render_breadcrumb( data.id, isShowMenu, exportableOperation ) \r\n\t\t\t\t}\r\n\t\t\t\t{ Operation.render_toggleButtonGroup( this ) }\r\n\t\t\t\t{ Operation.render_doButton( this ) }<br />\r\n\t\t\t\t{/* また、自身の子要素を list表示する */}\r\n\t\t\t\t<>{ Item.render_children( this ) }</>\r\n\t\t\t\t{ Operation.render_popupMenu() }\r\n\t\t\t</>\r\n\t\t\t:<>{indent}\r\n\t\t\t\t<>{/* 自身が list要素 なので、自身の content を表示する */}\r\n\t\t\t\t{ this.component.render_content( this ) }\r\n\t\t\t\t{/* また、付随するボタンを表示する */}\r\n\t\t\t\t{ Operation.render_attachedButton( this ) }<br />\r\n\t\t\t\t</>\r\n\t\t\t\t{( isShowingChildren )\r\n\t\t\t\t?\t<>\r\n\t\t\t\t\t{/* 子要素表示が true なら、さらに自身の子要素を list表示する */\r\n\t\t\t\t\tItem.render_children( this )\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</>\r\n\t\t\t\t:null\r\n\t\t\t\t}\r\n\t\t\t</>\r\n\t\t}</> );\r\n\t};\r\n\r\n\tstatic render_children( model ){\r\n\t\tconst data = model.props.data;\r\n\t\tif( ! data.childrenIds ) return null;\r\n\t\t// 子のデータ( Model ) の一覧を取得\r\n\t\tconst childDatas = data.childrenIds.map( ( _id ) => Item.data.get( _id ) );\r\n\t\t// 子のコンポーネント( View ) の一覧を取得\r\n\t\t//console.log( childDatas );\r\n\t\tconst childComponents = childDatas.map( ( _data ) => usableItemComponentList[ _data.type ] );\r\n\t\t\r\n\t\t//const key = \"key:\"+model.key+\"_id:\"+data.id;\r\n\t\t\r\n\t\t/*const root = ( this.props.relativeDepth === 0 )? this : this.props.root || null;\r\n\t\tif( root === null ){\r\n\t\t\tconsole.error( `model[ ${ this.key } ] から root の model が 取得できません。 render() を中断します` );\r\n\t\t\treturn null;\r\n\t\t};*/\r\n\t\t\r\n\t\treturn( <>{\r\n\t\t\tchildDatas.map( ( _data, _order  ) => {\r\n\t\t\t\tif( childComponents[ _order ].exportableOperations.isNotRender || false ) return null;\r\n\t\t\t\t\r\n\t\t\t\treturn <Item /*key={key}*/ data={_data} relativeDepth={model.props.relativeDepth+1} parent={model} />\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t}</> );\r\n\t};\r\n\t\r\n\t// props, state に変更があった場合、render() 直前に呼ばれる\r\n\tpublic static getDerivedStateFromProps(nextProps, nextState){\r\n\t\t// コンポーネントの紐づけを再度行う\r\n\t\t//console.log( nextProps.data.type );\r\n\t\t//this.component = usableItemComponentList[ nextProps.data.type ];\r\n\t};\r\n\t\r\n\tpublic static data = {\r\n\t\tlist : {},\r\n\t\tupdate : () => {\r\n\t\t\tconsole.error( \"update関数が、未セットの状態で呼び出されました \\n setInitialState( data, setState) を実行して、初期化してください \" );\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tgetList : () => {\r\n\t\t\treturn Item.data.list;\r\n\t\t},\r\n\t\t// このクラスの呼び出しもとで、最初にこれを実行しておく\r\n\t\tsetInitialState : ( _dataList, _dataList_setState ) => {\r\n\t\t\tItem.data.list = _dataList;\r\n\t\t\tItem.data.update = () => _dataList_setState( Item.data.list );\r\n\t\t},\r\n\t\t// View に props として渡す。 View から data を変更する際、極力、これのみを使用する\r\n\t\tsetState : ( target : string[], nextState, isRequestUpdate :boolean = true ) => {\r\n\t\t\tItem.data.list = set_by_traceDown( Item.data.list, target, nextState );\r\n\t\t\tif( isRequestUpdate ) Item.data.update();\r\n\t\t},\r\n\t\tgetUsableIds : ( _requestSize ) => {\r\n\t\t\tconst emptyIds = Item.data.list[ 0 ].emptyIds || [];\r\n\t\t\t// 空Id数 で足りる場合は、それを要求数だけ返す\r\n\t\t\tif( emptyIds.length >= _requestSize ){\r\n\t\t\t\treturn emptyIds.slice( 0, _requestSize );\r\n\t\t\t}\r\n\t\t\t// 空Id数 から 要求数 までの差分( difference )を求める\r\n\t\t\tconst difference = _requestSize - emptyIds.length;\r\n\t\t\t// 空Id数 から 要求数 までの補完( difference )を求める\r\n\t\t\tconst complementIds = Array( difference ).fill( Object.keys( Item.data.list ).length ).map( ( _max, _order ) => _max + _order );\r\n\t\t\t// 空Id数 と 補完 を連結して返す\r\n\t\t\treturn [ ...emptyIds, ...complementIds ];\r\n\t\t},\r\n\t\t// 以下は、listId 単位で、操作するために使用。 変更を反映するには、this.update() を実行する\r\n\t\tget : ( _id ) => {\r\n\t\t\treturn Item.data.list[ _id ];\r\n\t\t},\r\n\t\tset : ( _data ) => {\t// 事前に、_data には、使える Id を設定しておく必要がある\r\n\t\t\tItem.data.list[ _data.id ] = _data;\r\n\t\t},\r\n\t\tremove : ( _id ) => {\r\n\t\t\tdelete Item.data.list[ _id ];\r\n\t\t},\r\n\t\treincarnateEmptyIds : ( _ids : number[], isRequestUpdate : boolean = true ) => {\r\n\t\t\t// _ids には、もともと emptyId でないものが含まれていても、大丈夫\r\n\t\t\tlet set = new Set( Item.data.list[ 0 ].emptyIds );\r\n\t\t\t_ids.map( _id => set.delete( _id ) );\r\n\t\t\tItem.data.setState( [ \"0/emptyIds\" ], Array.from( set ), isRequestUpdate );\r\n\t\t},\r\n\t}\r\n\t\r\n\t// 外部から state を参照するために必要。使うか分からないけど・・・・・・\r\n\tpublic static instances = {\t// get(id), set(component), remove(id), reset()\r\n\t\tlist : [],\r\n\t\tgetNextKey : () => {\r\n\t\t\treturn Item.instances.list.length;\r\n\t\t},\r\n\t\tget : ( key ) => {\r\n\t\t\tif( Item.instances.list[ key ] ){ return Item.instances.list[ key ]; }\r\n\t\t\tconsole.error( \"<get 失敗> Item.instances に [ \" + key + \" ] は、含まれていません <取得失敗>\" );\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tset : ( instance ) => {\r\n\t\t\tif( ! Item.instances.list[ instance.key ] ){\r\n\t\t\t\tItem.instances.list[ instance.key ] = instance;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tconsole.error( \"<set 失敗> Item.instances.list に [ \" + instance.key + \" ] は、すでに含まれています\" );\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tremove : ( instance ) => {\r\n\t\t\tif( Item.instances.list[ instance.key ] ){\r\n\t\t\t\tItem.instances.list.splice( instance.key, 1 );\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\tconsole.error( \"<remove 失敗> Item.instances.list に [ \" + instance.key + \" ] は、含まれていません <削除失敗>\" );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\treset : () => {\r\n\t\t\tItem.instances.list = [];\r\n\t\t\tconsole.log( \"Item.instances.list はリセットされました\" );\r\n\t\t\treturn true;\r\n\t\t},\r\n\t};\r\n\t\r\n\tstatic forceUpdate (){\r\n\t\tItem.root.forceUpdate();\r\n\t}\r\n\t\r\n\tstatic addItem ( model, addType : string ){\r\n\t\tconsole.log( \"item[ \" + model.props.data.id + \" ] = \", Item.data.get[model.props.data.id] );\r\n\t\tconst newId = Item.data.getUsableIds( 1 );\r\n\t\tconst newItem = Item.usableItemComponentList[ addType ].getDefaultItem( newId );\r\n\t\tconst data = model.props.data;\r\n\t\tconst nextChildrenIds = [ ...data.childrenIds, newId ];\r\n\t\tItem.data.setState( [ newId ], newItem, false );\r\n\t\tItem.data.setState( [ model.props.data.id, \"childrenIds\" ], nextChildrenIds, false );\r\n\t\tconsole.log( \"item[ \" + model.props.data.id + \" ] に \" + addType + \" を作成しました\" );\r\n\t\tconsole.log( \"item[ \" + model.props.data.id + \" ] = \", Item.data.get(model.props.data.id) );\r\n\t\t\r\n\t\t// emptyIds から、再生させた id を除去する\r\n\t\tItem.data.reincarnateEmptyIds( [ ...newId ] );\t// ここで、Item.data の更新が反映される\r\n\t}\r\n\t\r\n\tstatic sortItem ( model ){\r\n\t\tconst parent = model.props.parent;\r\n\t\tconst parentId = parent.props.data.id;\r\n\t\tconst targetId = model.props.data.id;\r\n\t\tconst targetOrder = parent.props.data.childrenIds.findIndex( _id => _id === targetId );\r\n\t\t\r\n\t\tconsole.log( `sort 前 : ${ parent.props.data.childrenIds }` );\r\n\t\tconst nextChildrenIds = parent.props.data.childrenIds.map( ( _id, _order, _array ) => {\r\n\t\t\tif( _order === targetOrder ) return _array[ _order + 1 ];\r\n\t\t\tif( _order === targetOrder +1 ) return _array[ _order - 1];\r\n\t\t\treturn _id;\r\n\t\t} );\r\n\t\tconsole.log( `sort 後 : ${ nextChildrenIds } ` );\r\n\t\tItem.data.setState( [ parentId, \"childrenIds\" ], nextChildrenIds );\r\n\t}\r\n\r\n\tstatic getAddMenu ( model ) : []{\r\n\t\tconsole.log(model);\r\n\t\tconst acceptableTypes = model.component.exportableOperations.acceptableTypes || [];\r\n\t\tconsole.log( acceptableTypes );\r\n\t\tconst menu = acceptableTypes.map ( _type => {\r\n\t\t\tconsole.log( Item.usableItemComponentList[ _type ] );\r\n\t\t\tconst _information : string = Item.usableItemComponentList[ _type ].information || \"\";\r\n\t\t\treturn { caption : \"++ \" + _type, onClick : ()=>Item.addItem( model, _type ), information : _information };\r\n\t\t} ) || [];\r\n\t\tconsole.log( menu );\r\n\t\treturn menu;\r\n\t}\r\n\r\n\tstatic getPasteMenu ( model, operationState ){\r\n\t\t\r\n\t\tconst isNotPastable = model.component.exportableOperations.isNotPastable || false;\r\n\t\tconst isDescendant = model.component.exportableOperations.isDescendant || false;\t// true なら、子要素を持たない component\r\n\t\tif( isNotPastable || isDescendant ) return [];\r\n\t\t\r\n\t\t// copy, cut, link を拒否するアイテムを選択している場合は、これに追加する\r\n\t\tlet notCopyableTypes = new Set();\r\n\t\tlet notCutableTypes = new Set();\r\n\t\tlet notLinkableTypes = new Set();\r\n\t\t\r\n\t\tconst targetModels = Array.from( operationState.targetModels );\r\n\t\t\r\n\t\ttargetModels.map( ( _model : Item ) => {\r\n\t\t\tconst exportableOperations = _model.component.exportableOperations;\r\n\t\t\tconst name = _model.props.data.type + \" : \" + _model.props.data.name;\r\n\t\t\t\r\n\t\t\t// コンポーネントが、copy, cut, link を拒否する場合は、Set に追加する\r\n\t\t\tif( exportableOperations.isNotCopyable ) notCopyableTypes.add( name );\r\n\t\t\tif( exportableOperations.isNotCutvable ) notCutableTypes.add( name );\r\n\t\t\tif( exportableOperations.isNotLinkable ) notLinkableTypes.add( name );\r\n\r\n\t\t\t// console.log( `「 ${ name } 」は、copy, cut, link が 可能です` );\r\n\t\t} );\r\n\t\t\r\n\t\t// 操作用のメニューを作成する\r\n\t\tlet menu = [];\r\n\t\tif( notCopyableTypes.size === 0 ){\r\n\t\t\tmenu.push( { caption : \"copy & paste\", onClick : ()=>Item.copyPaste( model, operationState) } );\r\n\t\t}else{\r\n\t\t\tconst infoAboutNotCopyable = Array.from( notCopyableTypes ).join( \", \") + \" は、コピーできません\";\r\n\t\t\tmenu.push( { caption : \"copy & paste\", enabled : false, information : infoAboutNotCopyable } );\r\n\t\t}\r\n\t\tif( notCutableTypes.size === 0){\r\n\t\t\tmenu.push( { caption : \"cut & paste\", onClick : ()=>Item.cutPaste( model, operationState) } );\r\n\t\t}else{\r\n\t\t\tconst infoAboutNotCutable = Array.from( notCutableTypes ).join( \", \") + \" は、コピーできません\";\r\n\t\t\tmenu.push( { caption : \"cut & paste\", enabled : false, information : infoAboutNotCutable } );\r\n\t\t}\r\n\t\tif( notLinkableTypes.size === 0 ){\r\n\t\t\tmenu.push( { caption : \"link & paste\", onClick : ()=>Item.linkPaste( model, operationState) } );\r\n\t\t}else{\r\n\t\t\tconst infoAboutNotLinkable = Array.from( notLinkableTypes ).join( \", \") + \" は、コピーできません\";\r\n\t\t\tmenu.push( { caption : \"link & paste\", enabled : false, information : infoAboutNotLinkable } );\r\n\t\t}\r\n\t\treturn menu;\r\n\t}\r\n\r\n\tstatic getComponentFromId ( id ){\r\n\t\tconst data = Item.data.get( id );\r\n\t\tconst component = Item.usableItemComponentList[ data.type ];\r\n\t\treturn component;\r\n\t}\r\n\t\r\n\t/*\r\n\tstatic isAcceptable = ( destinationItem, targetItems ) :boolean => {\r\n\t\t\r\n\t\tconst rejectionedItems = targetItems.filter( ( targetItem ) => {\r\n\t\t\treturn ! destinationItem.acceptableTypes.includes( targetItem.type );\r\n\t\t} ) || [];\r\n\t\tif( rejectionedItems.length ){\r\n\t\t\tconst str = rejectionedItems.map( (i)=>i.type ).join( \", \" );\r\n\t\t\tconsole.log( str + \" は、\" + destinationItem + \" の直下に置けません\" );\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\tstatic isCopyable = ( targetItems ) :boolean => {\r\n\t\t\r\n\t\tconst isNotCopyableItems = targetItems.filter( ( targetItem ) => ( targetItem.isCopyable ) ) || [];\r\n\t\tif( isNotCopyableItems.length ){\r\n\t\t\tconst str = isNotCopyableItems.map( (i)=>i.type ).join( \",\" );\r\n\t\t\tconsole.log( str + \" は、コピーできないアイテムです\" );\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};*/\r\n\t\r\n\t// 完成 2019/10/5\r\n\tstatic copyPaste = ( model, operationState ) :boolean => {\r\n\t\t// getPasteMenu を経由して呼ばれるので、事前にすべての target がコピー可能であることが確認できている\r\n\t\r\n\t\t// targetModels の Set を 配列 として取得する\r\n\t\tconst targetModels = Array.from( operationState.targetModels );\r\n\t\t\r\n\t\t// 新しい id を、必要数だけ、取得する\r\n\t\tconst newIds = Item.data.getUsableIds( targetModels.length );\r\n\t\tconsole.log( newIds );\r\n\t\t// コピーした data の配列 を data に追加して、取得する\r\n\t\tconst copiedDatas = targetModels.map( ( _model : Item, order ) => {\r\n\t\t\t// targetModel の data をコピーして、新しい id を付与する\r\n\t\t\tconst id = newIds[ order ];\r\n\t\t\tconst copiedData = { ..._model.props.data, id : id };\r\n\t\t\tItem.data.setState( [id], copiedData, false );\t// ここでは、update = false なので、更新は保留にされる\r\n\t\t\treturn copiedData;\r\n\t\t} );\r\n\t\t// 親となる model の data に copiedData の id を子要素として追加する\r\n\t\tconst childrenIds = model.props.data.childrenIds || [];\r\n\t\tconst nextChildrenIds = [ ...childrenIds, ...newIds ];\r\n\t\tItem.data.setState( [ model.props.data.id, \"childrenIds\" ], nextChildrenIds, false );\t// updata = false なので、まだ保留\r\n\t\t\r\n\t\t// emptyIds から、再生させた id を除去する\r\n\t\tItem.data.reincarnateEmptyIds( newIds );\t// ここで、Item.data の更新が反映される\r\n\t\t\r\n\t\tconsole.log( copiedDatas, \" を data に追加しました\" );\r\n\t\tconsole.log( Item.data.list, \" が 追加後のデータです\" );\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// 完成 2019/10/7\r\n\tstatic cutPaste = ( model, operationState ) :boolean => {\r\n\t\t\r\n\t\t// targetModels Id を取得\r\n\t\tconst targetModels = Array.from( operationState.targetModels );\r\n\t\tconst targetDatas = targetModels.map( ( _model : Item ) => _model.props.data );\r\n\t\tconst targetIds = targetDatas.map( ( _data ) => _data.id );\r\n\t\t\r\n\t\t// 操作先の model の data に targetIds を子要素として追加する\r\n\t\tconst childrenIds_byDestination = model.props.data.childrenIds || [];\r\n\t\tconst nextChildrenIds_byDestination = [ ...childrenIds_byDestination, ...targetIds ];\r\n\t\tItem.data.setState( [ model.props.data.id, \"childrenIds\" ], nextChildrenIds_byDestination, false );\t// updata = false なので、まだ保留\r\n\t\t\r\n\t\t// 操作元の model の parent の data から targetIds を削除する\r\n\t\tconst sourceParentModels = Array.from( new Set( targetModels.map( ( _model : Item ) => _model.props.parent ) ) );\r\n\t\tsourceParentModels.map ( _parentModel => {\r\n\t\t\tlet childrenIds = new Set( _parentModel.props.data.childrenIds );\r\n\t\t\tconsole.log( childrenIds );\r\n\t\t\ttargetIds.map( _targetId => childrenIds.delete( _targetId ) );\r\n\t\t\tconst nextChildrenIds_bySourceParent = Array.from( childrenIds );\r\n\t\t\tItem.data.setState( [ _parentModel.props.data.id, \"childrenIds\" ], nextChildrenIds_bySourceParent, false );\r\n\t\t\tconsole.log( childrenIds );\r\n\t\t} );\r\n\t\tItem.data.update();\r\n\t\t\r\n\t\tconsole.log( targetDatas, \" を 移動しました\" );\r\n\t\tconsole.log( Item.data.list, \" 移動後のデータです\" );\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t// 完成 2019/10/7\r\n\tstatic linkPaste = ( model, operationState ) :boolean => {\r\n\t\t// operationExeButton から呼ばれる\r\n\r\n\t\t// targetModels Id を取得\r\n\t\tconst targetModels = Array.from( operationState.targetModels );\r\n\t\tconst targetDatas = targetModels.map( ( _model : Item ) => _model.props.data );\r\n\t\tconst targetIds = targetDatas.map( ( _data ) => _data.id );\r\n\t\t\r\n\t\t// 操作先の model の data に targetIds を子要素として追加する\r\n\t\tconst childrenIds_byDestination = model.props.data.childrenIds || [];\r\n\t\tconst nextChildrenIds_byDestination = [ ...childrenIds_byDestination, ...targetIds ];\r\n\t\tItem.data.setState( [ model.props.data.id, \"childrenIds\" ], nextChildrenIds_byDestination );\r\n\t\t\r\n\t\tconsole.log( targetDatas, \" を リンクしました\" );\r\n\t\tconsole.log( Item.data.list, \" リンク後のデータです\" );\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\tstatic remove = ( model, operationState ) : boolean => {\r\n\t\t\r\n\t\t// targetModels Id を取得\r\n\t\tconst targetModels = Array.from( operationState.targetModels );\r\n\t\tconst targetDatas = targetModels.map( ( _model : Item ) => _model.props.data );\r\n\t\tconst targetIds = targetDatas.map( ( _data ) => _data.id );\r\n\t\t\r\n\t\tconst removedDatas = targetDatas.map( ( _data : Item ) => RemovedItem.getDefaultItem( _data ) );\r\n\t\tremovedDatas.map( ( _data ) => Item.data.setState( [ _data.id ], _data, false ) );\r\n\t\t\r\n\t\tItem.data.setState( [ \"0\", \"removedIds\" ], targetIds );\r\n\t\t\r\n\t\tconsole.log( targetDatas, \" を 削除しました\" );\r\n\t\tconsole.log( Item.data.list, \" 削除後のデータです\" );\r\n\t\treturn true;\r\n\t};\r\n\r\n\r\n}","import React from 'react';\r\n\r\nimport Item, { defaultItemDataList } from './Item';\r\n\r\ninterface I_State {\r\n\tdata : { [  key : number ] : any };\r\n\taddress : number[];\r\n};\r\n\r\nexport default class CalcMate extends React.Component< any, I_State >{\r\n\t\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t\t\r\n\t\tconst data = defaultItemDataList;\r\n\t\tconst address = [0];\r\n\t\tthis.state = {\r\n\t\t\tdata : data,\r\n\t\t\taddress : address,\r\n\t\t};\r\n\t\t\r\n\t\tItem.data.setInitialState( data, ( nextState )=>{ this.setState( { data : nextState } ) } );\r\n\t};\r\n\t\r\n\tpublic render(){\r\n\t\tconst address = this.state.address;\r\n\t\treturn <Item data={this.state.data[ address[ address.length-1 ] ]} relativeDepth={0} parent={null} />;\r\n\t};\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport CalcMate from './components/CalcMate';\n\nReactDOM.render(<CalcMate />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}